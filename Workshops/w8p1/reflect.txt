Workshop 8 Part 2

In this workshop, I was able to learn about inheritance,  pure virtual functions, abstract base class, and concrete classes, and how to use the virtual function in C++. First, a virtual function is a thing that is defined by the word "virtual" alone. To replace the function of the base class from the derived class, like a virtual function is used. Also, when overriding a virtual function, the derived class's virtual function must be identical to the base class's virtual function in terms of return type, parameter, and function name. The term for this is dynamic linking.I can build a pure virtual function by adding some keywords to the virtual functions. The form of the pure virtual function is virtual void getSpecs(std::istream &istr) = 0;. 

The term "abstract base class" means to a class that only has pure virtual functions. This class is not able of creating an instance and needs a definition for a function. To put it another way, this class just provides the function's body for other derived classes to override. A concrete class is a class that overrides a pure virtual function. To meet the needs of the class, the function can replace a pure virtual function, and the class itself can create an instance. The destructor is the final important point. The destructor should be turned into a virtual function in cases where classes inherit from one another since both the actual and the underlying objects need to be destroyed.It is possible for these terms to appear challenging, which is why I faced many memory leak and had really hard time figuring it out.Â 